// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class bet extends ethereum.Event {
  get params(): bet__Params {
    return new bet__Params(this);
  }
}

export class bet__Params {
  _event: bet;

  constructor(event: bet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bet(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get win(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get side(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class funded extends ethereum.Event {
  get params(): funded__Params {
    return new funded__Params(this);
  }
}

export class funded__Params {
  _event: funded;

  constructor(event: funded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get funding(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlipContract extends ethereum.SmartContract {
  static bind(address: Address): FlipContract {
    return new FlipContract("FlipContract", address);
  }

  ContractBalance(): BigInt {
    let result = super.call(
      "ContractBalance",
      "ContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ContractBalance",
      "ContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawAll(): BigInt {
    let result = super.call("withdrawAll", "withdrawAll():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawAll(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawAll", "withdrawAll():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class FlipCall extends ethereum.Call {
  get inputs(): FlipCall__Inputs {
    return new FlipCall__Inputs(this);
  }

  get outputs(): FlipCall__Outputs {
    return new FlipCall__Outputs(this);
  }
}

export class FlipCall__Inputs {
  _call: FlipCall;

  constructor(call: FlipCall) {
    this._call = call;
  }

  get side(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class FlipCall__Outputs {
  _call: FlipCall;

  constructor(call: FlipCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FundContractCall extends ethereum.Call {
  get inputs(): FundContractCall__Inputs {
    return new FundContractCall__Inputs(this);
  }

  get outputs(): FundContractCall__Outputs {
    return new FundContractCall__Outputs(this);
  }
}

export class FundContractCall__Inputs {
  _call: FundContractCall;

  constructor(call: FundContractCall) {
    this._call = call;
  }
}

export class FundContractCall__Outputs {
  _call: FundContractCall;

  constructor(call: FundContractCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
